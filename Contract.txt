// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract CryptoCoin is ERC20, Ownable {
    // Maximum supply for the token (e.g., 100 billion tokens with 18 decimals)
    uint256 public constant MAX_SUPPLY = 100_000_000_000 * (10 ** 18);

    // Emergency pause functionality
    bool public paused = false;

    // Governance and rewards mechanisms (loyalty points and referral counts)
    mapping(address => uint256) public loyaltyPoints;
    mapping(address => uint256) public referredUsers;
    
    // Burn mechanism variables
    uint256 public burnRate = 100; // 1% burn per transfer (basis points: 100 / 10000)
    uint256 public totalBurnedTokens = 0;

    // Reserve tokens are locked for vesting; set to release 1 year from deployment
    uint256 public reserveReleaseTime;

    // Default secondary currency used when performing a fallback conversion
    // (For instance, this could be the government fiat currency preferred on your app)
    string public defaultSecondaryCurrency = "USD";

    // --- Governance Module ---

    // Structure that stores a proposal along with its voting details.
    struct Proposal {
        uint256 id;             // Unique identifier for the proposal
        address proposer;       // Who submitted the proposal
        string description;     // Proposal content (e.g., "SET_DEFAULT_SECONDARY_COIN:Ethereum")
        uint256 deadline;       // Time until voting closes (e.g., 3 days from creation)
        uint256 yesVotes;       // Total weighted yes votes
        uint256 noVotes;        // Total weighted no votes
        bool executed;          // Whether the proposal has been executed
    }
    uint256 public proposalCount;                   // Counter for proposals
    mapping(uint256 => Proposal) public proposals;    // Storage for proposals by their ID
    // Nested mapping to track if an account has already voted on a given proposal
    mapping(uint256 => mapping(address => bool)) public hasVoted;

    // --- Events for transparency ---
    event MultiWalletIntegrationExecuted(address indexed user, string description);
    event ConversionExecuted(address indexed user, uint256 convertedAmount, string description);
    event SaleExecuted(
        address indexed user,
        string soldAsset,
        uint256 amountSold,
        string convertedToCurrency
    );
    event AppInteraction(address indexed user, string description);
    event RewardDistributed(address indexed user, uint256 reward);
    event TokensBurned(address indexed user, uint256 burnedAmount);
    event GovernanceProposalCreated(address indexed proposer, string proposal, uint256 id);
    event ProposalVoted(uint256 indexed proposalId, address indexed voter, bool support, uint256 weight);
    event ProposalExecuted(uint256 indexed proposalId, bool passed);
    event ReserveTokensReleased(uint256 amount);
    event FallbackPaymentExecuted(address indexed user, uint256 deficitAmount, string secondaryCoinUsed, string details);

    // --- Constructor and Initial Token Distribution ---
    constructor(uint256 initialSupply) ERC20("Crypto Coin", "COIN") {
        require(initialSupply <= MAX_SUPPLY, "Initial supply exceeds maximum supply");

        // Token allocation percentages:
        uint256 founderAllocation = (initialSupply * 20) / 100;      // 20% to founder/owner
        uint256 developmentAllocation = (initialSupply * 25) / 100;  // 25% reserved for development
        uint256 marketingAllocation = (initialSupply * 15) / 100;    // 15% for marketing
        uint256 communityRewards = (initialSupply * 10) / 100;       // 10% for community rewards
        uint256 investorAllocation = (initialSupply * 20) / 100;       // 20% for investors
        uint256 reserveTokens = (initialSupply * 10) / 100;            // 10% held as reserve

        _mint(msg.sender, founderAllocation);        // Mint founder tokens to owner
        _mint(address(this), developmentAllocation);   // Mint tokens to contract for future usage
        _mint(address(this), marketingAllocation);
        _mint(address(this), communityRewards);
        _mint(address(this), investorAllocation);
        _mint(address(this), reserveTokens);

        // Lock reserve tokens for one year (vesting period)
        reserveReleaseTime = block.timestamp + 365 days;
    }

    // --- Basic Token Functions ---

    // Minting additional tokens, subject to the MAX_SUPPLY cap (owner-only)
    function mintTokens(address to, uint256 amount) external onlyOwner {
        require(totalSupply() + amount <= MAX_SUPPLY, "Exceeds maximum supply");
        _mint(to, amount);
    }

    // Allow token holders to burn tokens from their own balance
    function burnTokens(uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance to burn");
        _burn(msg.sender, amount);
        totalBurnedTokens += amount;
        emit TokensBurned(msg.sender, amount);
    }

    // Pause/unpause critical contract functionality (owner-only)
    function pauseContract() external onlyOwner {
        paused = true;
    }

    function unpauseContract() external onlyOwner {
        paused = false;
    }

    // Modifier to block function execution when the contract is paused
    modifier notPaused() {
        require(!paused, "Contract is paused.");
        _;
    }

    // --- Customized Transfer Function with Burn Mechanism ---

    function transfer(address recipient, uint256 amount) public override notPaused returns (bool) {
        // Calculate the burn amount (1% in this case)
        uint256 burnAmount = (amount * burnRate) / 10000;
        uint256 amountAfterBurn = amount - burnAmount;

        // Burn a portion of the tokens and then transfer the rest
        _burn(msg.sender, burnAmount);
        _transfer(msg.sender, recipient, amountAfterBurn);

        emit MultiWalletIntegrationExecuted(msg.sender, "Transfer completed with burn.");
        emit AppInteraction(msg.sender, "Crypto Coin used for micro-payment transaction");
        return true;
    }

    // --- Off-chain Asset Sale Simulation ---
    // This function logs asset sale events to simulate selling a secondary asset off-chain.
    function automateSale(
        address user,
        string memory asset,
        uint256 amount,
        string memory targetCurrency
    ) external notPaused returns (string memory) {
        emit SaleExecuted(
            user,
            asset,
            amount,
            string(abi.encodePacked("Converted to ", targetCurrency))
        );
        emit AppInteraction(user, "Asset sale initiated via the app");
        return "Sale and conversion executed successfully off-chain.";
    }

    // --- Governance Functions ---

    /// @notice Create a new governance proposal.
    /// @param _description Description of the proposal.
    /// Example proposal: "SET_DEFAULT_SECONDARY_COIN:Ethereum"
    function createProposal(string memory _description) external returns (uint256) {
        proposalCount++;
        proposals[proposalCount] = Proposal({
            id: proposalCount,
            proposer: msg.sender,
            description: _description,
            deadline: block.timestamp + 3 days,  // Voting period lasts 3 days
            yesVotes: 0,
            noVotes: 0,
            executed: false
        });
        emit GovernanceProposalCreated(msg.sender, _description, proposalCount);
        return proposalCount;
    }

    /// @notice Vote on an active proposal.
    /// Voting weight is proportional to the voter's CryptoCoin balance.
    function voteOnProposal(uint256 _proposalId, bool _support) external {
        Proposal storage proposal = proposals[_proposalId];
        require(block.timestamp < proposal.deadline, "Voting period ended");
        require(!hasVoted[_proposalId][msg.sender], "Already voted");
        hasVoted[_proposalId][msg.sender] = true;

        uint256 voterWeight = balanceOf(msg.sender);
        if (_support) {
            proposal.yesVotes += voterWeight;
        } else {
            proposal.noVotes += voterWeight;
        }
        emit ProposalVoted(_proposalId, msg.sender, _support, voterWeight);
    }

    /// @notice Execute a proposal after the voting period has ended.
    /// For demonstration, if the proposal passes and its description begins with 
    /// "SET_DEFAULT_SECONDARY_COIN:" the default secondary currency is updated.
    function executeProposal(uint256 _proposalId) external {
        Proposal storage proposal = proposals[_proposalId];
        require(block.timestamp >= proposal.deadline, "Voting period not ended");
        require(!proposal.executed, "Proposal already executed");

        bool passed = proposal.yesVotes > proposal.noVotes;
        if (passed) {
            // Example: to update the default secondary coin based on proposal instruction.
            string memory prefix = "SET_DEFAULT_SECONDARY_COIN:";
            bytes memory descBytes = bytes(proposal.description);
            bytes memory prefixBytes = bytes(prefix);
            if (descBytes.length > prefixBytes.length) {
                bool validPrefix = true;
                for (uint256 i = 0; i < prefixBytes.length; i++) {
                    if (descBytes[i] != prefixBytes[i]) {
                        validPrefix = false;
                        break;
                    }
                }
                if (validPrefix) {
                    bytes memory newCoinBytes = new bytes(descBytes.length - prefixBytes.length);
                    for (uint256 i = 0; i < newCoinBytes.length; i++) {
                        newCoinBytes[i] = descBytes[i + prefixBytes.length];
                    }
                    defaultSecondaryCurrency = string(newCoinBytes);
                }
            }
        }
        proposal.executed = true;
        emit ProposalExecuted(_proposalId, passed);
    }

    // --- Tap-To-Pay Functionality with Fallback Payment Mechanism ---

    /// @notice Processes a point-of-sale payment.
    /// @dev If the sender's balance is insufficient to cover the payment,
    /// the contract automatically tops-up the sender's balance using reserve tokens.
    /// In a production system, the reserve top-up would be handled by an off-chain
    /// process converting a secondary coin (like Bitcoin, Ethereum, or Shibu) to government currency,
    /// then purchasing CryptoCoin.
    function tapToPay(address recipient, uint256 amount, string memory secondaryCoinUsed) external notPaused returns (bool) {
        if (balanceOf(msg.sender) >= amount) {
            // If sufficient balance, process a normal transfer.
            transfer(recipient, amount);
            return true;
        } else {
            // Calculate the deficit to reach the required payment amount.
            uint256 deficit = amount - balanceOf(msg.sender);
            
            // Use reserve tokens stored in this contract as a fallback.
            require(balanceOf(address(this)) >= deficit, "Contract reserve insufficient for fallback conversion");
            // Automatically top up the payer's balance by transferring from the contract reserve.
            _transfer(address(this), msg.sender, deficit);
            emit ConversionExecuted(msg.sender, deficit, "Fallback secondary coin conversion: Reserve tokens used.");
            
            // Now that the payer's balance is sufficient, process the transfer.
            transfer(recipient, amount);
            emit FallbackPaymentExecuted(msg.sender, deficit, secondaryCoinUsed, "Fallback payment executed using reserve tokens.");
            return true;
        }
    }
}